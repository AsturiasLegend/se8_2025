{"ast":null,"code":"import { createVNode as _createVNode, createElementVNode as _createElementVNode, vModelText as _vModelText, withDirectives as _withDirectives, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"register-page\"\n};\nconst _hoisted_2 = {\n  class: \"register-card\"\n};\nconst _hoisted_3 = {\n  class: \"form-group\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createVNode($setup[\"TopBar\"], {\n    title: \"用户注册\"\n  }), _createElementVNode(\"div\", _hoisted_2, [_cache[3] || (_cache[3] = _createElementVNode(\"h2\", null, \"创建新账号\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_3, [_withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $setup.username = $event),\n    placeholder: \"用户名\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $setup.username]]), _withDirectives(_createElementVNode(\"input\", {\n    type: \"password\",\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $setup.password = $event),\n    placeholder: \"密码\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $setup.password]]), _withDirectives(_createElementVNode(\"input\", {\n    type: \"password\",\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => $setup.confirm = $event),\n    placeholder: \"确认密码\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $setup.confirm]])]), _createElementVNode(\"button\", {\n    class: \"register-btn\",\n    onClick: $setup.submit\n  }, \"注册\")])]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","_createVNode","$setup","title","_createElementVNode","_hoisted_2","_hoisted_3","type","_cache","$event","username","placeholder","password","confirm","onClick","submit"],"sources":["E:\\ZJU_Courses\\CS\\se\\register\\src\\views\\RegisterUserView.vue"],"sourcesContent":["<template>\r\n  <div class=\"register-page\">\r\n    <TopBar title=\"用户注册\" />\r\n\r\n    <div class=\"register-card\">\r\n      <h2>创建新账号</h2>\r\n      <div class=\"form-group\">\r\n        <input type=\"text\" v-model=\"username\" placeholder=\"用户名\" />\r\n        <input type=\"password\" v-model=\"password\" placeholder=\"密码\" />\r\n        <input type=\"password\" v-model=\"confirm\" placeholder=\"确认密码\" />\r\n      </div>\r\n      <button class=\"register-btn\" @click=\"submit\">注册</button>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref } from 'vue'\r\nimport { useRouter } from 'vue-router'\r\nimport TopBar from '@/components/TopBar.vue'\r\nimport { ElMessage } from 'element-plus'\r\n\r\nconst username = ref('')\r\nconst password = ref('')\r\nconst confirm = ref('')\r\nconst router = useRouter()\r\n\r\nconst submit = async () => {\r\n  if (!username.value || !password.value || !confirm.value) {\r\n    ElMessage.warning('请填写所有字段')\r\n    return\r\n  }\r\n  if (password.value !== confirm.value) {\r\n    ElMessage.error('两次输入密码不一致')\r\n    return\r\n  }\r\n\r\n  try {\r\n    const res = await fetch('http://localhost:8000/register/', {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify({\r\n        username: username.value,\r\n        password: password.value\r\n      })\r\n    })\r\n    const data = await res.json()\r\n    if (data.status === 'success') {\r\n      ElMessage.success('注册成功，请登录')\r\n      router.push('/login')\r\n    } else {\r\n      ElMessage.error(data.message || '注册失败')\r\n    }\r\n  } catch (e) {\r\n    ElMessage.error('服务器连接失败')\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.register-page {\r\n  padding-top: 120px;\r\n  background: #eef3f5;\r\n  height: 100vh;\r\n}\r\n.register-card {\r\n  background: white;\r\n  width: 360px;\r\n  margin: 0 auto;\r\n  padding: 40px;\r\n  border-radius: 16px;\r\n  text-align: center;\r\n  box-shadow: 0 8px 20px rgba(0, 0, 0, 0.1);\r\n}\r\nh2 {\r\n  margin-bottom: 24px;\r\n}\r\n.form-group {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 16px;\r\n  margin-bottom: 20px;\r\n}\r\ninput {\r\n  padding: 12px;\r\n  font-size: 16px;\r\n  border: 1px solid #ccc;\r\n  border-radius: 6px;\r\n}\r\n.register-btn {\r\n  background: #0056ba;\r\n  color: white;\r\n  font-size: 16px;\r\n  padding: 12px;\r\n  width: 100%;\r\n  border-radius: 8px;\r\n  border: none;\r\n  cursor: pointer;\r\n}\r\n</style>\r\n"],"mappings":";;EACOA,KAAK,EAAC;AAAe;;EAGnBA,KAAK,EAAC;AAAe;;EAEnBA,KAAK,EAAC;AAAY;;uBAL3BC,mBAAA,CAYM,OAZNC,UAYM,GAXJC,YAAA,CAAuBC,MAAA;IAAfC,KAAK,EAAC;EAAM,IAEpBC,mBAAA,CAQM,OARNC,UAQM,G,0BAPJD,mBAAA,CAAc,YAAV,OAAK,sBACTA,mBAAA,CAIM,OAJNE,UAIM,G,gBAHJF,mBAAA,CAA0D;IAAnDG,IAAI,EAAC,MAAM;IAP1B,uBAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAOoCP,MAAA,CAAAQ,QAAQ,GAAAD,MAAA;IAAEE,WAAW,EAAC;iDAAtBT,MAAA,CAAAQ,QAAQ,E,mBACpCN,mBAAA,CAA6D;IAAtDG,IAAI,EAAC,UAAU;IAR9B,uBAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAQwCP,MAAA,CAAAU,QAAQ,GAAAH,MAAA;IAAEE,WAAW,EAAC;iDAAtBT,MAAA,CAAAU,QAAQ,E,mBACxCR,mBAAA,CAA8D;IAAvDG,IAAI,EAAC,UAAU;IAT9B,uBAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IASwCP,MAAA,CAAAW,OAAO,GAAAJ,MAAA;IAAEE,WAAW,EAAC;iDAArBT,MAAA,CAAAW,OAAO,E,KAEzCT,mBAAA,CAAwD;IAAhDN,KAAK,EAAC,cAAc;IAAEgB,OAAK,EAAEZ,MAAA,CAAAa;KAAQ,IAAE,E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}